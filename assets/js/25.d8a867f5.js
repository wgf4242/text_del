(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{639:function(t,v,_){"use strict";_.r(v);var e=_(4),a=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[t._v("[TOC]")]),t._v(" "),_("h2",{attrs:{id:"汇编-asm-assemble"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#汇编-asm-assemble"}},[t._v("#")]),t._v(" 汇编 ASM assemble")]),t._v(" "),_("p",[t._v("https://www.zrzz.site/2020/06/03/%E5%AE%9E%E9%AA%8C%E5%B9%B3%E5%8F%B0%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86/")]),t._v(" "),_("p",[_("a",{attrs:{href:"http://faydoc.tripod.com/cpu/jne.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Link"),_("OutboundLink")],1)]),t._v(" "),_("p",[_("a",{attrs:{href:"https://www.tutorialspoint.com/assembly_programming/assembly_conditions.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Link2"),_("OutboundLink")],1)]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("类型")]),t._v(" "),_("th",[t._v("2进制")]),t._v(" "),_("th",[t._v("16进制")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Byte 8位")]),t._v(" "),_("td",[t._v("0000 0000")]),t._v(" "),_("td",[t._v("0x0")])]),t._v(" "),_("tr",[_("td",[t._v("Word 16位")]),t._v(" "),_("td",[t._v("0000 0000 0000 0000")]),t._v(" "),_("td",[t._v("0x00")])]),t._v(" "),_("tr",[_("td",[t._v("DWord 32位")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("0x0000")])])])]),t._v(" "),_("h3",{attrs:{id:"汇编基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#汇编基础"}},[t._v("#")]),t._v(" 汇编基础")]),t._v(" "),_("h4",{attrs:{id:"pointer-registers"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pointer-registers"}},[t._v("#")]),t._v(" Pointer Registers")]),t._v(" "),_("p",[t._v("8个通用寄存器eax，ebx，ecx，edx，edi，esi，esp，ebp寄存器可以简单的理解为高级语言中的变量\neax（累加器）：默认保存着加法乘法结果函数返回值4\nesi/edi（源/目标索引寄存器）：通常用于字符串操作esi保存着源字符串的首地址edi保存着目标字符串的首地址\nesp：扩展栈指针寄存器指向当前栈顶即保存着当前栈顶的地址\nebp:（扩展基址指针寄存器）指向当前栈底即保存着当前栈底的地址\neip（指令指针寄存器）：该寄存器存放着将要执行的代码的地址当一个程序开始运行时系统自动将 eip\n清零每取入一条指令eip 自动增加取入cpu的字节数在控制程序流程时控制eip寄存器的值显得尤为关\n键决定着是否可以驰骋内存。")]),t._v(" "),_("p",[t._v("Article From Pluralsight - Getting_Started_with_Reverse_Engineering")]),t._v(" "),_("p",[t._v("32-bit pointer registers with 16-bit portions")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("EIP – instruction pointer")])]),t._v(" "),_("li",[_("p",[t._v("ESP – stack pointer")])]),t._v(" "),_("li",[_("p",[t._v("EBP – base pointer")])])]),t._v(" "),_("p",[t._v("64-bit pointer registers")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("RIP – instruction pointer")])]),t._v(" "),_("li",[_("p",[t._v("RSP – stack pointer")])]),t._v(" "),_("li",[_("p",[t._v("RBP – base pointer")])])]),t._v(" "),_("h4",{attrs:{id:"index-registers"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#index-registers"}},[t._v("#")]),t._v(" Index Registers")]),t._v(" "),_("p",[t._v("32-bit index registers with 16-bit portions")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("ESI – source index")])]),t._v(" "),_("li",[_("p",[t._v("EDI – destination index")])])]),t._v(" "),_("p",[t._v("64-bit pointer registers")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("RSI – source index")])]),t._v(" "),_("li",[_("p",[t._v("RDI – destination index")])])]),t._v(" "),_("p",[t._v("These are commonly used for copy operations")]),t._v(" "),_("h4",{attrs:{id:"eflags-rflags"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#eflags-rflags"}},[t._v("#")]),t._v(" EFLAGS & RFLAGS")]),t._v(" "),_("p",[t._v("32 and 64 bit registers that represent the results of operations and the state of the CPU")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Common values include:")])]),t._v(" "),_("li",[_("p",[t._v("Carry flag - CF")])]),t._v(" "),_("li",[_("p",[t._v("Zero flag - ZF")])]),t._v(" "),_("li",[_("p",[t._v("Sign flag - SF")])]),t._v(" "),_("li",[_("p",[t._v("Trap flag - TF")])]),t._v(" "),_("li",[_("p",[t._v("Direction flag - DF")])]),t._v(" "),_("li",[_("p",[t._v("Overflow flag - OF")])])]),t._v(" "),_("p",[t._v("The upper 32-bits of RFLAGS are reserved")]),t._v(" "),_("h4",{attrs:{id:"processor-registers"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#processor-registers"}},[t._v("#")]),t._v(" Processor Registers")]),t._v(" "),_("p",[t._v("32 bit systems are commonly considered to have 8 general purpose registers:")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("32 bits")]),t._v(" "),_("th",[t._v("Lower 16 bits")]),t._v(" "),_("th",[t._v("Lower 8 bits")]),t._v(" "),_("th",[t._v("Upper 8 bits")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("EAX")]),t._v(" "),_("td",[t._v("AX")]),t._v(" "),_("td",[t._v("AL")]),t._v(" "),_("td",[t._v("AH")])]),t._v(" "),_("tr",[_("td",[t._v("EBX")]),t._v(" "),_("td",[t._v("BX")]),t._v(" "),_("td",[t._v("BL")]),t._v(" "),_("td",[t._v("BH")])]),t._v(" "),_("tr",[_("td",[t._v("ECX")]),t._v(" "),_("td",[t._v("CX")]),t._v(" "),_("td",[t._v("CL")]),t._v(" "),_("td",[t._v("CH")])]),t._v(" "),_("tr",[_("td",[t._v("EDX")]),t._v(" "),_("td",[t._v("DX")]),t._v(" "),_("td",[t._v("DL")]),t._v(" "),_("td",[t._v("CL")])]),t._v(" "),_("tr",[_("td",[t._v("ESI")]),t._v(" "),_("td",[t._v("SI")]),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("EDI")]),t._v(" "),_("td",[t._v("DI")]),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("EBP")]),t._v(" "),_("td",[t._v("BP")]),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("ESP")]),t._v(" "),_("td",[t._v("SP")]),t._v(" "),_("td"),t._v(" "),_("td")])])]),t._v(" "),_("p",[t._v("64 bit architecture extends 32 bit general purpose registers and adds 8 more:")]),t._v(" "),_("p",[t._v("64 bits|32 bits|Lower 16"),_("br"),t._v(" bits|Lower 8"),_("br"),t._v(" bits|Upper 8"),_("br"),t._v(" bits\n-|-|-|-|\nRAX|EAX|AX|AL|AH\nRBX|EBX|BX|BL|BH\nRCX|ECX|CX|CL|CH\nRDX|EDX|DX|DL|CL\nRSI|ESI|SI|\nRDI|EDI|DI|\nRBP|EBP|BP|\nRSP|ESP|SP|\nR8 - R15|R8-15D|R8-15W|R8-15B")]),t._v(" "),_("p",[t._v("Passing arguments to functions\n·Method 1:Using Registers\n·Method 2:Using Global Data\n·Method 3:Using the Stack")]),t._v(" "),_("p",[t._v("·Method 1:Using Registers")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("   mov eax, 5\n   mov edx, 2\n   call my_func\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br")])]),_("p",[t._v("·Method 2:Using Global Data")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("section '.bss' readable writeable\narg1 dd  ?\narg2 dd  ?\n\nmov dword [arg1], 5\nmov dword [arg2], 5\ncall my_func\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br")])]),_("p",[t._v("·Method 3:Using the Stack")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("    push 5\n    push 2\n    call my_func\n    add esp, 8 ; clean stack\n\nmy_func:\n    mov eax,word [esp + 8]\n    sub eax,word [esp + 4]\n    ret\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br"),_("span",{staticClass:"line-number"},[t._v("8")]),_("br"),_("span",{staticClass:"line-number"},[t._v("9")]),_("br")])]),_("h4",{attrs:{id:"exe-结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#exe-结构"}},[t._v("#")]),t._v(" EXE 结构")]),t._v(" "),_("table",[_("thead",[_("th",[t._v("段")]),t._v(" "),_("th",[t._v("内容")]),t._v(" "),_("th",[t._v("说明")])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Header")])]),t._v(" "),_("tr",[_("td",{attrs:{rowspan:"4"}},[t._v("Section")]),t._v(" "),_("td",[t._v("code(.text)")]),t._v(" "),_("td",[t._v("text/.code: program instructions in binary state, entry point of program")])]),t._v(" "),_("tr",[_("td",[t._v("read-only data")]),t._v(" "),_("td",[t._v(".data/.idata: initialized data")])]),t._v(" "),_("tr",[_("td",[t._v("resources")]),t._v(" "),_("td",[t._v(".rsrc: resources used by the program – icons, images, arbitrary binary data")])]),t._v(" "),_("tr",[_("td",[t._v("other sections")]),t._v(" "),_("td",[t._v(".bss: unitialized data")])]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("</tbody>\n")])])])])]),t._v("\n#### Executing a Program\n"),_("p",[t._v("=> virtual memory => 通常从0x400000 开始")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("-")]),t._v(" "),_("th",[t._v("-")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[_("code",[t._v("[bits 32]")])]),t._v(" "),_("td",[t._v("Defines architecture")])]),t._v(" "),_("tr",[_("td",[t._v("section .text")]),t._v(" "),_("td",[t._v("Defines the section for code")])]),t._v(" "),_("tr",[_("td",[t._v("global _START")]),t._v(" "),_("td",[t._v("Defines the entry point")])]),t._v(" "),_("tr",[_("td",[t._v("_START")]),t._v(" "),_("td",[t._v("Entry point")])]),t._v(" "),_("tr",[_("td",[t._v("push ebp")]),t._v(" "),_("td",[t._v("Instructions")])]),t._v(" "),_("tr",[_("td",[t._v("mov esp, ebp")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("sub esp, 8h")]),t._v(" "),_("td",[t._v("* NASM Syntax")])])])]),t._v(" "),_("p",[t._v("Generating Machine Code")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Write an instruction: xor eax, eax")])]),t._v(" "),_("li",[_("p",[t._v("Translate:: assembler, compiler or interpreter")])]),t._v(" "),_("li",[_("p",[t._v("Results in machine code: 0x31 0xC0")])])]),t._v(" "),_("h4",{attrs:{id:"essential-instructions"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#essential-instructions"}},[t._v("#")]),t._v(" Essential Instructions")]),t._v(" "),_("h5",{attrs:{id:"arthmetic"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arthmetic"}},[t._v("#")]),t._v(" Arthmetic")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("ax")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("bx")]),t._v(" "),_("td",[t._v("1")]),t._v(" "),_("td",[t._v("1")]),t._v(" "),_("td",[t._v("0")]),t._v(" "),_("td",[t._v("0")]),t._v(" "),_("td",[t._v("1")]),t._v(" "),_("td",[t._v("1")]),t._v(" "),_("td",[t._v("0")]),t._v(" "),_("td",[t._v("0")]),t._v(" "),_("td",[t._v("1")]),t._v(" "),_("td",[t._v("0")]),t._v(" "),_("td",[t._v("1")]),t._v(" "),_("td",[t._v("0")]),t._v(" "),_("td",[t._v("1")]),t._v(" "),_("td",[t._v("0")]),t._v(" "),_("td",[t._v("0")]),t._v(" "),_("td",[t._v("0")])])])]),t._v(" "),_("p",[t._v("add ax, bx")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("--")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")])])]),t._v(" "),_("tbody")]),t._v(" "),_("p",[t._v("add al, bl")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")])])]),t._v(" "),_("tbody")]),t._v(" "),_("p",[t._v("sub al, bl")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("--")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("1")])])]),t._v(" "),_("tbody")]),t._v(" "),_("p",[_("strong",[t._v("Arthmetic - Multiplication")])]),t._v(" "),_("p",[t._v("MUL")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Unsigned multiply")])]),t._v(" "),_("li",[_("p",[t._v("Uses an implicit argument based on operand size")])]),t._v(" "),_("li",[_("p",[t._v("Example:")])]),t._v(" "),_("li",[_("p",[t._v("MUL BX")])])]),t._v(" "),_("p",[t._v("IMUL")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Signed multiply")])]),t._v(" "),_("li",[_("p",[t._v("Uses one, two or three\noperands")])]),t._v(" "),_("li",[_("p",[t._v("Allows you to explicitly\ndefine destination")])]),t._v(" "),_("li",[_("p",[t._v("Example:")])]),t._v(" "),_("li",[_("p",[t._v("IMUL DEST, SRC1, SRC2")])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("operand size")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("source(implicit)")]),t._v(" "),_("th",[t._v("source2(explicit)")]),t._v(" "),_("th",[t._v("destination")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Byte 8 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("AL")]),t._v(" "),_("td",[t._v("8 bit register or memory")]),t._v(" "),_("td",[t._v("AX")])]),t._v(" "),_("tr",[_("td",[t._v("Word 16 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("AX")]),t._v(" "),_("td",[t._v("16 bit register or memory")]),t._v(" "),_("td",[t._v("DX:AX")])]),t._v(" "),_("tr",[_("td",[t._v("Double word 32 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("EAX")]),t._v(" "),_("td",[t._v("32 bit register or memory")]),t._v(" "),_("td",[t._v("EDX:EAX")])]),t._v(" "),_("tr",[_("td",[t._v("Quad word 64 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("RAX")]),t._v(" "),_("td",[t._v("64 bit register or memory")]),t._v(" "),_("td",[t._v("RDX:RAX")])])])]),t._v(" "),_("p",[_("strong",[t._v("Arthmetic - Division")])]),t._v(" "),_("p",[t._v("DIV")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Unsigned divide")])]),t._v(" "),_("li",[_("p",[t._v("Uses an implicit argument based on operand size")])]),t._v(" "),_("li",[_("p",[t._v("Example:")])]),t._v(" "),_("li",[_("p",[t._v("DIV AX")])])]),t._v(" "),_("p",[t._v("IDIV")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Signed divide")])]),t._v(" "),_("li",[_("p",[t._v("Example:")]),t._v(" "),_("ul",[_("li",[t._v("IDIV AX")])])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("operand size")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("source(implicit)")]),t._v(" "),_("th",[t._v("source2(explicit)")]),t._v(" "),_("th",[t._v("destination")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Byte 8 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("AX")]),t._v(" "),_("td",[t._v("AH")]),t._v(" "),_("td",[t._v("AL")])]),t._v(" "),_("tr",[_("td",[t._v("Word 16 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("DX:AX")]),t._v(" "),_("td",[t._v("DX")]),t._v(" "),_("td",[t._v("AX")])]),t._v(" "),_("tr",[_("td",[t._v("Double word 32 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("EDX:EAX")]),t._v(" "),_("td",[t._v("EDX")]),t._v(" "),_("td",[t._v("EAX")])]),t._v(" "),_("tr",[_("td",[t._v("Quad word 64 bits")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("RDX:RAX")]),t._v(" "),_("td",[t._v("RDX")]),t._v(" "),_("td",[t._v("RAX")])])])]),t._v(" "),_("h5",{attrs:{id:"performing-comparisons-cmp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#performing-comparisons-cmp"}},[t._v("#")]),t._v(" Performing Comparisons/Cmp")]),t._v(" "),_("p",[t._v("Results of the comparison update corresponding ”flags” in the E/RFLAGS register")]),t._v(" "),_("ul",[_("li",[t._v("Flags affected: CF, OF, SF, ZF, AF, PF")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("Instruction")]),t._v(" "),_("th",[t._v("Description")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("JE / JZ")]),t._v(" "),_("td",[t._v("Jump Equal or Jump Zero")])]),t._v(" "),_("tr",[_("td",[t._v("JNE / JNZ")]),t._v(" "),_("td",[t._v("Jump Not Equal or Jump Not Zero")])]),t._v(" "),_("tr",[_("td",[t._v("JG / JNLE")]),t._v(" "),_("td",[t._v("Jump Greater or Jump NotLess/Equal")])]),t._v(" "),_("tr",[_("td",[t._v("JGE / JNL")]),t._v(" "),_("td",[t._v("Jump Greater/Equal or Jump NotLess")])]),t._v(" "),_("tr",[_("td",[t._v("JL / JNGE")]),t._v(" "),_("td",[t._v("Jump Less or Jump NotGreater/Equal")])]),t._v(" "),_("tr",[_("td",[t._v("JLE / JNG")]),t._v(" "),_("td",[t._v("Jump Less/Equal or Jump NotGreater")])])])]),t._v(" "),_("hr"),t._v(" "),_("h5",{attrs:{id:"the-call-function"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#the-call-function"}},[t._v("#")]),t._v(" The Call Function")]),t._v(" "),_("p",[t._v("CALL is similar to a jump instruction, tells CPU where to go next.")]),t._v(" "),_("p",[t._v("However, there is a key difference:")]),t._v(" "),_("ul",[_("li",[t._v("CALL pushes the address of the nextinstruction onto the stack")])]),t._v(" "),_("p",[_("strong",[t._v("A CALL is typically followed by a RET instruction")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("RET POPs the value on top of the stack into EIP")])]),t._v(" "),_("li",[_("p",[t._v("As long as the function is aligned, this\nallows a function to return to where it\nwas called from")])])]),t._v(" "),_("h4",{attrs:{id:"bitwise-operations-endianness-and-size"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#bitwise-operations-endianness-and-size"}},[t._v("#")]),t._v(" Bitwise Operations, Endianness and Size")]),t._v(" "),_("h5",{attrs:{id:"size-directives"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#size-directives"}},[t._v("#")]),t._v(" Size Directives")]),t._v(" "),_("p",[t._v("You will need to think in terms of size and\nnot data types")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("quad-word (qword): 8 bytes / 64 bits")])]),t._v(" "),_("li",[_("p",[t._v("double-word (dword): 4 bytes / 32 bits")])]),t._v(" "),_("li",[_("p",[t._v("word: 2 bytes / 16 bits")])]),t._v(" "),_("li",[_("p",[t._v("byte: 8 bits")])]),t._v(" "),_("li",[_("p",[t._v("bit: a single 1 or 0")])])]),t._v(" "),_("p",[t._v("You may encounter and need to use these directives in your instructions:")]),t._v(" "),_("ul",[_("li",[t._v("mov word ptr [eax], bx")])]),t._v(" "),_("h5",{attrs:{id:"endianness"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#endianness"}},[t._v("#")]),t._v(" Endianness")]),t._v(" "),_("p",[t._v("When storing data in memory, the byte order is determined by architecture")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Big-endian – most significant byte first")])]),t._v(" "),_("li",[_("p",[t._v("Little-endian – least significant byte first")])])]),t._v(" "),_("p",[t._v("Only affects multi-byte values Keep in mind when debugging programs")]),t._v(" "),_("h3",{attrs:{id:"常用的词汇解释"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用的词汇解释"}},[t._v("#")]),t._v(" 常用的词汇解释")]),t._v(" "),_("p",[t._v("汇编zhidao语言中CS，DS，SS还有一个ES定义如下：")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("CS（Code Segment）：代码段寄存器；\nDS（Data Segment）：数据段寄存器；\nSS（Stack Segment）：堆栈段寄存器；\nES（Extra Segment）：附加段寄存器。\nLEA 传操作数地址。。Load Effectiv Address\nBP Base Point 基址寻址器\n")])])]),_("p",[t._v("当一个程序容要执行时，就要决定程序代码、数据和堆栈各要用到内存的哪些位置，通过设定段寄存器 CS，DS，SS 来指向这些起始位置。通常是将DS固定，而根据需要修改CS。")]),t._v(" "),_("p",[t._v("SUB OPRD1，OPRD2 ：功能：两个操作数的相减，即从OPRD1中感去OPRD2, 保存到OPRD1中")]),t._v(" "),_("p",[t._v("DH DL是DX寄存器的高位寄存器和低位寄存器，比如8086里DX是16位那H和L就是高8位和低8位，不过你也可以单独使用")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("理解 dl 可能单独取第一个 byte 字符\n")])])]),_("p",[t._v("inc eax, => eax +1  , 同dec")]),t._v(" "),_("p",[t._v("dec esi, => esi - 1, 影响AF、OF、PF、SF、ZF标志位，但不影响CF标志位")]),t._v(" "),_("p",[t._v("CDQ Convert Double to Quad, 32位转64位, edx扩展为eax的高位，也就是说变为64位")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("把百edx的每一位置成eax的最高位（若eax>=0x80000000, 则度edx=0xFFFFFFFF；若eax<0x80000000，则edx=0x00000000） ，再把edx扩展为eax的高位。\n")])])]),_("p",[t._v("int 3, CPU执行int n指令，相当于引发一个n号中断的中断过程。")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("让程序产生一个interrupt 3\n这个中断通常是给debug使用的\n就是说，程序过运行收到Int 3\n那么会去调用debug服务之类的\n")])])]),_("p",[t._v("SAR, SHR")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("Sar是算数右移指令（Shift Arithmetic Right），右移保留操作数的符号,即最高位不变\nSHR是逻辑右移指令（Shift Logical Right）。右移时总是用0来补足。\n例如10000000算数右移一位是11000000，而逻辑右移一位是01000000。\n")])])]),_("h4",{attrs:{id:"跳转说明"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#跳转说明"}},[t._v("#")]),t._v(" "),_("strong",[t._v("跳转说明")])]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("JE   ;等于则跳转\nJNE  ;不等于则跳转\n\nJZ   ;为 0 则跳转\nJNZ  ;不为 0 则跳转\n\nJS   ;为负则跳转\nJNS  ;不为负则跳转\n\nJC   ;进位则跳转\nJNC  ;不进位则跳转\n\nJO   ;溢出则跳转\nJNO  ;不溢出则跳转\n\nJA   ;无符号大于则跳转\nJNA  ;无符号不大于则跳转\nJAE  ;无符号大于等于则跳转\nJNAE ;无符号不大于等于则跳转\n\nJG   ;有符号大于则跳转\nJNG  ;有符号不大于则跳转\nJGE  ;有符号大于等于则跳转\nJNGE ;有符号不大于等于则跳转\n\nJB   ;无符号小于则跳转\nJNB  ;无符号不小于则跳转\nJBE  ;无符号小于等于则跳转\nJNBE ;无符号不小于等于则跳转\n\nJL   ;有符号小于则跳转\nJNL  ;有符号不小于则跳转\nJLE  ;有符号小于等于则跳转\nJNLE ;有符号不小于等于则跳转\n\nJP   ;奇偶位置位则跳转\nJNP  ;奇偶位清除则跳转\nJPE  ;奇偶位相等则跳转\nJPO  ;奇偶位不等则跳转\n")])])]),_("h4",{attrs:{id:"标志位"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标志位"}},[t._v("#")]),t._v(" 标志位")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("CF:     进位标志符号比         排在第0位\nPF:     奇偶标志                     排在第2位\nAF:     辅助进位标志             排在第4位\nZF:     零标志                         排在第6位\nSF:     符号标志                     排在第7位\nTF:     追踪标志                     排在第8位\nIF:      中断允许标志             排在第9位\nDF:    方向标志                     排在第10位\nOF:    溢出标志                     排在第11位\n")])])]),_("p",[t._v("跳转相关的标志位:")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("11")]),t._v(" "),_("th",[t._v("10")]),t._v(" "),_("th",[t._v("9")]),t._v(" "),_("th",[t._v("8")]),t._v(" "),_("th",[t._v("7")]),t._v(" "),_("th",[t._v("6")]),t._v(" "),_("th",[t._v("5")]),t._v(" "),_("th",[t._v("4")]),t._v(" "),_("th",[t._v("3")]),t._v(" "),_("th",[t._v("2")]),t._v(" "),_("th",[t._v("1")]),t._v(" "),_("th",[t._v("0")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("OF")]),t._v(" "),_("td",[t._v("DF")]),t._v(" "),_("td",[t._v("IF")]),t._v(" "),_("td",[t._v("TF")]),t._v(" "),_("td",[t._v("SF")]),t._v(" "),_("td",[t._v("ZF")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("AF")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("PF")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("CF")])]),t._v(" "),_("tr",[_("td",[t._v("溢出")]),t._v(" "),_("td"),t._v(" "),_("td"),t._v(" "),_("td"),t._v(" "),_("td",[t._v("符号")]),t._v(" "),_("td",[t._v("零")]),t._v(" "),_("td",[t._v("span")]),t._v(" "),_("td",[t._v("辅助")]),t._v(" "),_("td",[t._v("未用")]),t._v(" "),_("td",[t._v("奇偶")]),t._v(" "),_("td",[t._v("未用")]),t._v(" "),_("td",[t._v("进位")])])])]),t._v(" "),_("h3",{attrs:{id:"基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),_("p",[t._v("计算机通常是32位处理。 快速负转正")]),t._v(" "),_("p",[t._v("bytes")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("-1 = 256 - 1 = 2^8 -1\n-2 = 256 - 1 = 2^8 -2\n")])])]),_("p",[t._v("word")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("-1 = 65536 - 1 = 2^16 - 1\n-2 = 65536 - 1 = 2^16 - 2\n")])])]),_("p",[t._v("一个有符号定点数的最高位为符号位，0是正，1是副。")]),t._v(" "),_("p",[t._v("负数： 最高位为1时为负数, 求补码就可以知道负多少。")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("说明")]),t._v(" "),_("th",[t._v("示例")]),t._v(" "),_("th",[t._v("数值")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("bytes 8位")]),t._v(" "),_("td",[t._v("1111 1111")]),t._v(" "),_("td",[t._v("-1")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("1111 1100")]),t._v(" "),_("td",[t._v("-4")])]),t._v(" "),_("tr",[_("td",[t._v("32位")]),t._v(" "),_("td",[t._v("1111 1111 1111 1111 1111 1111 1111 1111")]),t._v(" "),_("td",[t._v("-1")])]),t._v(" "),_("tr",[_("td",[t._v("32位")]),t._v(" "),_("td",[t._v("1111 1111 1111 1111 1111 1111 1111 0000")]),t._v(" "),_("td",[t._v("-16")])])])]),t._v(" "),_("p",[t._v("负数的反码是将其原码除符号位之外的各位求反")]),t._v(" "),_("p",[t._v("[-3]反=[10000011]反=11111100")]),t._v(" "),_("p",[t._v("负数的补码是将其原码除符号位之外的各位求反之后在末位再加1。")]),t._v(" "),_("p",[t._v("[-3]补=[10000011]补=11111101")]),t._v(" "),_("p",[t._v("-2 = 2的反码+1")]),t._v(" "),_("p",[t._v("-3 = 3的反码+1")]),t._v(" "),_("p",[t._v("1字节 转换 [x]反+1=-x ， 反向也是这么转")]),t._v(" "),_("p",[t._v("1转-1 FF 为 -1， 1为1")]),t._v(" "),_("p",[t._v("2转-2 2 =2反+1 = 11111101b(即-3) + 1 = -2\n-2转2 -2=-2反-1= [11111110b(-2) -1]反 =2")]),t._v(" "),_("h3",{attrs:{id:"test"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#test"}},[t._v("#")]),t._v(" Test")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://blog.csdn.net/qwq1503/article/details/101976846",target:"_blank",rel:"noopener noreferrer"}},[t._v("Test"),_("OutboundLink")],1),t._v(" 逻辑与操作， 常用测试寄存器是否为空:")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("test ecx, ecx\njz somewhere\n")])])]),_("p",[t._v("如果ecx为零,设置ZF零标志为1,Jz跳转")]),t._v(" "),_("h3",{attrs:{id:"示例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("lea ebx,dword ptr ds:[ebx]\n/mov cx,word ptr ds:[eax]                ;  将eax的word->即前两位 给cx\n|add eax,0x2                             ;  eax指向下一字符\n|test cx,cx                              ;  cx寄存器是否为空, 即指针下是否有字符, 为空时z置1否则置0\n\\jnz short CTF_100_.00D81060             ;  nz 时跳转 , nz not zero\nsub eax,edx                              ;  现在地址-原来的地址即数组长度, 保存到eax\nsar eax,1                                ;  除以2, 每个字符2长度, 看多少字符\ncmp eax,0x10                             ;  需要16位\nja CTF_100_.00D8116B\ntest eax,eax                             ;  判断为空\nje CTF_100_.00D8116B\nlea ecx,[local.321]                      ;  输入的字符写到ecx\ncall CTF_100_.00D81180                   ;  关键call\ncmp eax,-0x1\nje CTF_100_.00D8116B\nlea edx,[local.321]\npush edx\npush CTF_100_.00D8DA20                   ;  {FLAG:%s}\\n\n")])])]),_("h4",{attrs:{id:"计算长度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#计算长度"}},[t._v("#")]),t._v(" 计算长度")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("mov     cx, word ptr [eax]\nadd     eax, 2\ntest    cx, cx\njnz     short 004020F6\n")])])]),_("h3",{attrs:{id:"mov"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mov"}},[t._v("#")]),t._v(" mov")]),t._v(" "),_("p",[t._v("mov ax,word ptr [bx] 解释")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("mov ax,word ptr [bx];是把内存地址等于“BX寄存器的值”的地copy方所存放的数据，赋予ax。由于只是给出一个内存地址，不知道希望赋百予ax的，是byte还是word，所以需要用word明确指度出！ ptr是显示申明（还是声明？）知\n所以，当两个操作数的宽度不一样时，就要用到，\n这里的宽度是指bit说简单点就是 16位的还是8位的！\ncpu内部的寄存器，是16位的，（老了吧？）\n而内存的单位寻址是8位的，所以他们的宽度不一样\n就需要显示声道明ptr,\n当你用dw和dt、db等时，就需要他来显示声明了，\n")])])]),_("h3",{attrs:{id:"sar"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#sar"}},[t._v("#")]),t._v(" sar")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("sar eax,1 就是把eax的32位数算术右移一位。度\neax的值为7（0000...0111）  移位以后\neax的值为3（0000...0011）。\n移出的最低位（1）放到cf中。\n右移一位道相当于除以2。\n算术右回移是说移动过程中保答持最高位不变。\n")])])]),_("h3",{attrs:{id:"lea"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#lea"}},[t._v("#")]),t._v(" lea")]),t._v(" "),_("p",[t._v("举个例子，要计算两个寄存器的和，但又不想破坏原来的值，那么可以执行")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("lea ebx ,[eax+edx]\n")])])]),_("p",[t._v("这条指令，执行的就是 "),_("code",[t._v("ebx = eax + edx")]),t._v(" 这条加法运算。如果用add指令，则不可能一条指令内完成。")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("lea rdx, [rbp-90h]  // rdx=rbp-0x90\n\nlea ebx,dword ptr ds:[ebx] ; dword表示存储类型为dword 双字4字节\n")])])]),_("p",[t._v("3.在汇编语言程序设计中，在需要取得一个变量地址时，使用LEA是很方便的。而MOV指令则常常出错，因为在微软MASM汇编语法中，label和variable是不同的。")]),t._v(" "),_("p",[t._v("例2")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[t._v("lea     edx, dword_9595EC\n\nedx = dword_9595EC\n")])])]),_("h3",{attrs:{id:"常用汇编代码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用汇编代码"}},[t._v("#")]),t._v(" 常用汇编代码")]),t._v(" "),_("p",[t._v("xor eax, eax 寄存器清0")]),t._v(" "),_("h3",{attrs:{id:"leave-指令是将栈指针指向帧指针，然后pop备份的原帧指针到-ebp。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#leave-指令是将栈指针指向帧指针，然后pop备份的原帧指针到-ebp。"}},[t._v("#")]),t._v(" LEAVE 指令是将栈指针指向帧指针，然后POP备份的原帧指针到%EBP。")]),t._v(" "),_("h3",{attrs:{id:"ret-指令则是将栈顶的返回地址弹出到eip，然后按照eip此时指示的指令地址继续执行程序。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ret-指令则是将栈顶的返回地址弹出到eip，然后按照eip此时指示的指令地址继续执行程序。"}},[t._v("#")]),t._v(" RET 指令则是将栈顶的返回地址弹出到EIP，然后按照EIP此时指示的指令地址继续执行程序。")]),t._v(" "),_("h3",{attrs:{id:"数组表示"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数组表示"}},[t._v("#")]),t._v(" 数组表示")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v(".text:009595EC dword_9595EC dd 2\n.text:009595F0 dd offset dword_9595F4\n\nv2=9595EC\nv6=v2[1] //9595F4\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br")])])])}),[],!1,null,null,null);v.default=a.exports}}]);